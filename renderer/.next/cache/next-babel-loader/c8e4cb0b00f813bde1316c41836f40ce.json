{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Component } from 'react';\nexport default class extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      input: '',\n      message: null\n    });\n\n    _defineProperty(this, \"handleMessage\", (event, message) => {\n      // receive a message from the main process and save it in the local state\n      this.setState({\n        message\n      });\n    });\n\n    _defineProperty(this, \"handleChange\", event => {\n      this.setState({\n        input: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleSubmit\", event => {\n      event.preventDefault();\n      global.ipcRenderer.send('message', this.state.input);\n      this.setState({\n        message: null\n      });\n    });\n  }\n\n  componentDidMount() {\n    // start listening the channel message\n    global.ipcRenderer.on('message', this.handleMessage);\n  }\n\n  componentWillUnmount() {\n    // stop listening the channel message\n    global.ipcRenderer.removeListener('message', this.handleMessage);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"jsx-1912268166\"\n    }, __jsx(\"h1\", {\n      className: \"jsx-1912268166\"\n    }, \"Hello Electron!\"), this.state.message && __jsx(\"p\", {\n      className: \"jsx-1912268166\"\n    }, this.state.message), __jsx(\"form\", {\n      onSubmit: this.handleSubmit,\n      className: \"jsx-1912268166\"\n    }, __jsx(\"input\", {\n      type: \"text\",\n      onChange: this.handleChange,\n      className: \"jsx-1912268166\"\n    })), __jsx(_JSXStyle, {\n      id: \"1912268166\"\n    }, \"h1.jsx-1912268166{color:red;font-size:50px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kaXBlbmR1L1Byb2plY3RzL2pzY2xhc3MvbmV4dGVlL3JlbmRlcmVyL3BhZ2VzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRDb0IsQUFHdUIsVUFDSyxlQUNqQiIsImZpbGUiOiIvVXNlcnMvZGlwZW5kdS9Qcm9qZWN0cy9qc2NsYXNzL25leHRlZS9yZW5kZXJlci9wYWdlcy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXRlID0ge1xuICAgIGlucHV0OiAnJyxcbiAgICBtZXNzYWdlOiBudWxsLFxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gc3RhcnQgbGlzdGVuaW5nIHRoZSBjaGFubmVsIG1lc3NhZ2VcbiAgICBnbG9iYWwuaXBjUmVuZGVyZXIub24oJ21lc3NhZ2UnLCB0aGlzLmhhbmRsZU1lc3NhZ2UpXG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAvLyBzdG9wIGxpc3RlbmluZyB0aGUgY2hhbm5lbCBtZXNzYWdlXG4gICAgZ2xvYmFsLmlwY1JlbmRlcmVyLnJlbW92ZUxpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5oYW5kbGVNZXNzYWdlKVxuICB9XG5cbiAgaGFuZGxlTWVzc2FnZSA9IChldmVudCwgbWVzc2FnZSkgPT4ge1xuICAgIC8vIHJlY2VpdmUgYSBtZXNzYWdlIGZyb20gdGhlIG1haW4gcHJvY2VzcyBhbmQgc2F2ZSBpdCBpbiB0aGUgbG9jYWwgc3RhdGVcbiAgICB0aGlzLnNldFN0YXRlKHsgbWVzc2FnZSB9KVxuICB9XG5cbiAgaGFuZGxlQ2hhbmdlID0gZXZlbnQgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpbnB1dDogZXZlbnQudGFyZ2V0LnZhbHVlIH0pXG4gIH1cblxuICBoYW5kbGVTdWJtaXQgPSBldmVudCA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGdsb2JhbC5pcGNSZW5kZXJlci5zZW5kKCdtZXNzYWdlJywgdGhpcy5zdGF0ZS5pbnB1dClcbiAgICB0aGlzLnNldFN0YXRlKHsgbWVzc2FnZTogbnVsbCB9KVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8aDE+SGVsbG8gRWxlY3Ryb24hPC9oMT5cblxuICAgICAgICB7dGhpcy5zdGF0ZS5tZXNzYWdlICYmIDxwPnt0aGlzLnN0YXRlLm1lc3NhZ2V9PC9wPn1cblxuICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9PlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0gLz5cbiAgICAgICAgPC9mb3JtPlxuXG4gICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICBoMSB7XG4gICAgICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICAgICAgZm9udC1zaXplOiA1MHB4O1xuICAgICAgICAgIH1cbiAgICAgICAgYH08L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG4iXX0= */\\n/*@ sourceURL=/Users/dipendu/Projects/jsclass/nextee/renderer/pages/index.js */\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/dipendu/Projects/jsclass/nextee/renderer/pages/index.js"],"names":["Component","input","message","event","setState","target","value","preventDefault","global","ipcRenderer","send","state","componentDidMount","on","handleMessage","componentWillUnmount","removeListener","render","handleSubmit","handleChange"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,eAAe,cAAcA,SAAd,CAAwB;AAAA;AAAA;;AAAA,mCAC7B;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE;AAFH,KAD6B;;AAAA,2CAgBrB,CAACC,KAAD,EAAQD,OAAR,KAAoB;AAClC;AACA,WAAKE,QAAL,CAAc;AAAEF,QAAAA;AAAF,OAAd;AACD,KAnBoC;;AAAA,0CAqBtBC,KAAK,IAAI;AACtB,WAAKC,QAAL,CAAc;AAAEH,QAAAA,KAAK,EAAEE,KAAK,CAACE,MAAN,CAAaC;AAAtB,OAAd;AACD,KAvBoC;;AAAA,0CAyBtBH,KAAK,IAAI;AACtBA,MAAAA,KAAK,CAACI,cAAN;AACAC,MAAAA,MAAM,CAACC,WAAP,CAAmBC,IAAnB,CAAwB,SAAxB,EAAmC,KAAKC,KAAL,CAAWV,KAA9C;AACA,WAAKG,QAAL,CAAc;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KA7BoC;AAAA;;AAMrCU,EAAAA,iBAAiB,GAAG;AAClB;AACAJ,IAAAA,MAAM,CAACC,WAAP,CAAmBI,EAAnB,CAAsB,SAAtB,EAAiC,KAAKC,aAAtC;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrB;AACAP,IAAAA,MAAM,CAACC,WAAP,CAAmBO,cAAnB,CAAkC,SAAlC,EAA6C,KAAKF,aAAlD;AACD;;AAiBDG,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA,OACE;AAAA;AAAA,yBADF,EAGG,KAAKN,KAAL,CAAWT,OAAX,IAAsB;AAAA;AAAA,OAAI,KAAKS,KAAL,CAAWT,OAAf,CAHzB,EAKE;AAAM,MAAA,QAAQ,EAAE,KAAKgB,YAArB;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAE,KAAKC,YAAlC;AAAA;AAAA,MADF,CALF;AAAA;AAAA,ioEADF;AAkBD;;AAlDoC","sourcesContent":["import { Component } from 'react'\n\nexport default class extends Component {\n  state = {\n    input: '',\n    message: null,\n  }\n\n  componentDidMount() {\n    // start listening the channel message\n    global.ipcRenderer.on('message', this.handleMessage)\n  }\n\n  componentWillUnmount() {\n    // stop listening the channel message\n    global.ipcRenderer.removeListener('message', this.handleMessage)\n  }\n\n  handleMessage = (event, message) => {\n    // receive a message from the main process and save it in the local state\n    this.setState({ message })\n  }\n\n  handleChange = event => {\n    this.setState({ input: event.target.value })\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n    global.ipcRenderer.send('message', this.state.input)\n    this.setState({ message: null })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello Electron!</h1>\n\n        {this.state.message && <p>{this.state.message}</p>}\n\n        <form onSubmit={this.handleSubmit}>\n          <input type=\"text\" onChange={this.handleChange} />\n        </form>\n\n        <style jsx>{`\n          h1 {\n            color: red;\n            font-size: 50px;\n          }\n        `}</style>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}